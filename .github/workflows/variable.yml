##### Defining Variables at Step level####
# name: GitHub_Actions_Variable_Demo
# run-name: ${{ github.actor }} is testing GitHub Action features
# on: [push]


# jobs:
#     docker:
#         runs-on: ubuntu-latest
#         steps:
#         - name: Docker Build
#           env:
#             DOCKER_REGISTRY: docker.io
#             DOCKER_USERNAME: rshtecq
#             IMAGE_NAME: github_actions_nginx
#           run: docker build -t ${{env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
#         # run: docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#         - name: Docker Login
#           env:
#             DOCKER_USERNAME: rshtecq
#             DOCKER_PASSWORD: 010388
#           run: docker login --username=${{ env.DOCKER_USERNAME }} --password=${{ env.DOCKER_PASSWORD }} 

#         - name: Docker Publish
#           env:
#             DOCKER_REGISTRY: docker.io
#             DOCKER_USERNAME: rshtecq
#             IMAGE_NAME: github_actions_nginx
#           run: docker psuh ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
    
#     deploy:
#         runs-on: ubuntu-latest
#         steps:
#         - name: Creating a container
#           env:
#             DOCKER_REGISTRY: docker.io
#             DOCKER_USERNAME: rshtecq
#             IMAGE_NAME: github_actions_nginx
#           run: docker run -d -p 8080:80 ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest



############################################################################################################################################

##### Defining Variable at Job level #####
# name: GitHub_Actions_Variable_Demo
# run-name: ${{ github.actor }} is testing GitHub Action features
# on: [push]

# jobs:
#     docker:
#         env:
#             DOCKER_REGISTRY: docker.io
#             DOCKER_USERNAME: rshtecq
#             IMAGE_NAME: github_actions_nginx
#             DOCKER_PASSWORD: 010388
#         runs-on: ubuntu-latest
#         steps:
#         - name: Docker Build
#           run: docker build -t ${{env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
#         # run: docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#         - name: Docker Login
#           run: docker login --username=${{ env.DOCKER_USERNAME }} --password=${{ env.DOCKER_PASSWORD }} 

#         - name: Docker Publish
#           run: docker psuh ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
    
#     deploy:
#         env:
#             DOCKER_REGISTRY: docker.io
#             DOCKER_USERNAME: rshtecq
#             IMAGE_NAME: github_actions_nginx
#         runs-on: ubuntu-latest
#         steps:
#         - name: Creating a container
#           run: docker run -d -p 8080:80 ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest


 ############################################################################################################################################         

##### Defining Variable at Workflow level#####
name: GitHub_Actions_Variable_Demo
run-name: ${{ github.actor }} is testing GitHub Action features
on: [push]
env:
    DOCKER_REGISTRY: docker.io
    DOCKER_USERNAME: rshtecq
    IMAGE_NAME: github_actions_nginx
    DOCKER_PASSWORD: 010388


jobs:  # its a job
    docker:   # Job name
        runs-on: ubuntu-latest
        steps:
        - name: Docker Build
          run: docker build -t ${{env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        # run: docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
        - name: Docker Login        
          run: docker login --username=${{ env.DOCKER_USERNAME }} --password=${{ env.DOCKER_PASSWORD }} 

        - name: Docker Publish
          run: docker psuh ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
    
    deploy:  # Job name
        runs-on: ubuntu-latest
        steps:
        - name: Creating a container 
          run: docker run -d -p 8080:80 ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest


